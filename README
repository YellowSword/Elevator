Compsci 310 Lab 3

###########
# Team Info
###########

Name1: Anna Liu
NetId: yl179

############
# Time spent
############

30+ hours

#################
# Files to submit
#################
elevator.log
README

EventBarrier
-AbstractEventBarrier.java (given template API)
-EventBarrier.java
-GateKeeper.java
-Main.java
-Minstrel.java

Elevator
-Building.java
-Elevator.java
-EventBarrier.java (modified from the previous one)
-Main.java
-Rider.java

#######################
#Implementation Details
#######################

************
EventBarrier
************
EventBarrier runs from the Main.java class in the EventBarrier folder.

An EventBarrier represents a sequence of event occurrences through time. Minstrels are the consumer threads that
arrive at the barrier to wait for the next event. The gatekeeper is the producer thread that stands watch
over the barrier and signals the minstrels when an event takes place.

Minstrels arrive at the bridge to wait for the next event, i.e. the drawbridge being lowered. The gatekeeper will raise
the event: the gatekeeper will signal the minstrels that the drawbridge has been lowered so that all the minstrels will
wake up, respond to the event by crossing the drawbridge, and then notify the gatekeeper that their handling of the event
has been complete when they have reached the other side of the bridge. If a minstrel arrives when the drawbridge has
already been lowered (i.e. event in progress), then it will cross the bridge (it will arrive immediately without blocking
and respond to the event in progress).

The EventBarrier uses a simple boolean to keep a record of its internal state and remember that an event is in progress.
The event is the lowering of the drawbridge so that the waiting minstrels can cross.

********
Elevator
********
Elevator runs from the Main.java class in the Elevator folder.

Each rider thread is initiated with a start and stopping floor. Depending on where the rider is going, the rider
thread calls building.callUp() or building.callDown() and blocks until the elevator arrives on the floor that the rider is on.
The rider thread wakes after the elevator arrives on its starting floor and then subsequently calls elevator.enter()
after it has crossed the EventBarrier to enter the elevator. Once the rider thread is inside the elevator, it calls
elevator.requestFloor() to tell the elevator where it wants to go and then blocks again until the elevator has arrived at
the rider thread's intended destination. Once the elevator arrives at the rider thread's destination floor, the rider
thread will call elevator.exit() to recross the eventBarrier in order to exit the elevator.

An EventBarrier represents each floor of the building. The eventBarrier blocks the rider thread when it is outside of the
elevator and tries to enter the elevator when the elevator has not arrived at its starting floor. The eventBarrier also
blocks the rider thread when it is inside the elevator and tries to exit the elevator when the elevator has not arrived
at its destination floor.

The elevator threads loops until it has fulfilled all the rider thread requests.

Resource scheduling for multiple elevators works like the following.

When a rider calls an elevator to go either up or down, the elevator that is going in the direction of the rider's
current location will respond to the rider's call. If the elevator that responds first is full, then the rider will
will wait for the next elevator that has room. If the elevator is going in the opposite direction that the rider wants to go,
the rider will also wait for the next elevator that is going in the rider's intended direction. If elevators are not
servicing requests, then a random elevator will be selected for the rider.

An elevator's work queue is divided up based on the up and down direction. After an elevator has completed a request,
it will service the next closest floor in the same direction as that of the last request. Once the elevator has fulfilled
requests for one direction, it will change direction and start servicing requests for the other direction.

##########
#Feedback
##########
I thought that the lab was fairly difficult because this was my first project with multi-threaded programming. It took
me a long time to implement the elevator because I had to learn different scheduling techniques on my own. I decided
to work alone for this lab because I have been out of town a lot for job interviews and had difficulty coordinating
with classmates to schedule group work times.









